# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import text_analyser_pb2 as text__analyser__pb2


class TextAnalyserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyseText = channel.unary_unary(
                '/TextAnalyserService/AnalyseText',
                request_serializer=text__analyser__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=text__analyser__pb2.AnalysisResponse.FromString,
                )


class TextAnalyserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AnalyseText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextAnalyserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyseText': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyseText,
                    request_deserializer=text__analyser__pb2.AnalysisRequest.FromString,
                    response_serializer=text__analyser__pb2.AnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TextAnalyserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextAnalyserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AnalyseText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TextAnalyserService/AnalyseText',
            text__analyser__pb2.AnalysisRequest.SerializeToString,
            text__analyser__pb2.AnalysisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatisticsStorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreStatistics = channel.unary_unary(
                '/StatisticsStorageService/StoreStatistics',
                request_serializer=text__analyser__pb2.StorageRequest.SerializeToString,
                response_deserializer=text__analyser__pb2.StorageResponse.FromString,
                )
        self.GetStatistics = channel.unary_unary(
                '/StatisticsStorageService/GetStatistics',
                request_serializer=text__analyser__pb2.GetStatisticsRequest.SerializeToString,
                response_deserializer=text__analyser__pb2.GetStatisticsResponse.FromString,
                )


class StatisticsStorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticsStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreStatistics,
                    request_deserializer=text__analyser__pb2.StorageRequest.FromString,
                    response_serializer=text__analyser__pb2.StorageResponse.SerializeToString,
            ),
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=text__analyser__pb2.GetStatisticsRequest.FromString,
                    response_serializer=text__analyser__pb2.GetStatisticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StatisticsStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatisticsStorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StatisticsStorageService/StoreStatistics',
            text__analyser__pb2.StorageRequest.SerializeToString,
            text__analyser__pb2.StorageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StatisticsStorageService/GetStatistics',
            text__analyser__pb2.GetStatisticsRequest.SerializeToString,
            text__analyser__pb2.GetStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WebDisplayServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatistics = channel.unary_unary(
                '/WebDisplayService/GetStatistics',
                request_serializer=text__analyser__pb2.GetStatisticsRequest.SerializeToString,
                response_deserializer=text__analyser__pb2.GetStatisticsResponse.FromString,
                )


class WebDisplayServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebDisplayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=text__analyser__pb2.GetStatisticsRequest.FromString,
                    response_serializer=text__analyser__pb2.GetStatisticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WebDisplayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WebDisplayService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WebDisplayService/GetStatistics',
            text__analyser__pb2.GetStatisticsRequest.SerializeToString,
            text__analyser__pb2.GetStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
